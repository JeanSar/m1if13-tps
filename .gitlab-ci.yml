# Cache downloaded dependencies and plugins between builds.
# Not strictly necessary, but speeds up the builds.
cache:
    key: "$CI_JOB_NAME"
    paths:
        # Must be within the repository under test hence we can't use the
        # default ~/.m2
        - .m2/repository
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `d..TesteployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"


deploy:
    image: maven:3.6.1-jdk-11 # docker image with Maven
    before_script:
        # The runners on the forge need a proxy to access the web. mvn
        # ignores the $http_proxy & friends variable => write a
        # configuration file that does this for us.
        - . ci/setup-mvn-proxy.sh
        # Useful only for debugging
        - chmod 400 $CI_SSH_KEY
        - cd users/
    script:
        - mvn clean package --batch-mode
        - scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY /builds/p1710759/m1if13-tps/users/target/mif13.war gitlabci@192.168.75.13:/opt/tomcat/webapps/mif13.war      

deploy_api_and_admin:
    image: node:16.14.2
    before_script:
        - chmod 400 $CI_SSH_KEY
        - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.13 "rm -rf /deploy/api"
        - cd admin/
        - npm install
        - npm run build:prod
    script:
        # Copie du répertoire contenant l'api node.js sans avoir fait npm install
        - scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY -r /builds/p1710759/m1if13-tps/api gitlabci@192.168.75.13:/deploy/
        # Puis on lance le npm install directement sur la vm, une fois la copie ok (cela évite de copier trop de fichiers)
        - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.13 "cd /deploy/api && npm i"
    after_script:
        # Puis une fois que le serveur node est corectement déployé, on copie le fichier js gérant la page admin
        - scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY /builds/p1710759/m1if13-tps/api/public/static/dist/main.js gitlabci@192.168.75.13:/deploy/api/public/static/dist/main.js

deployvue:
  image: node:16.14.2
  before_script:
      - chmod 400 $CI_SSH_KEY
      - cd client/
      - npm i
      - npm run build
  script:
      - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.13 "rm -r /deploy/client"
      - scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY -r /builds/p1710759/m1if13-tps/client/dist gitlabci@192.168.75.13:/deploy/client